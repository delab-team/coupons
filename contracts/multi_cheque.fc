#include "imports/stdlib.fc";

const int op::claim = 0x22356c66;
const int op::confirm = 0x93d37ba8;


global int public_key;
global cont claim_cont;
global int cheque_amount;
global int activations;
global int activatied;
global cell helper_code;

() load_data() impure {
    var ds = get_data().begin_parse();

    public_key = ds~load_uint(256);
    cheque_amount = ds~load_coins();
    activations = ds~load_uint(64);
    ds~skip_bits(32);
    activatied = ds~load_uint(64);
    claim_cont = ds~load_ref().begin_parse().bless();
    helper_code = ds~load_ref();
}

() save_data() impure {
    set_data(begin_cell()
        .store_slice(get_data().begin_parse().skip_last_bits(64))
        .store_uint(activatied, 64)
    .end_cell()
    );
}

() claim (int cheque_amount, slice address, cont c) impure asm "EXECUTE";

cell calculate_init(slice address) {
    return begin_cell()
        .store_uint(6, 5)
        .store_ref(helper_code)
        .store_ref(begin_cell()
            .store_slice(address)
            .store_slice(my_address())
            .store_uint(0, 1)
        .end_cell())
    .end_cell();
}

slice calculate_address(cell init){
    return begin_cell()
        .store_uint(4, 3)
        .store_int(0, 8)
        .store_uint(cell_hash(init), 256)
    .end_cell().begin_parse();
}

() recv_internal(cell in_msg_full, slice in_msg) impure {
    if (in_msg.slice_bits() < 32){
        return ();
    }
    int op = in_msg~load_uint(32);

    load_data();

    if (op == op::claim){
        slice signature = in_msg~load_bits(512);
        slice address = in_msg;

        throw_unless(700, check_signature(slice_hash(address), signature, public_key));

        throw_unless(702, activatied < activations);

        cell init = calculate_init(address);

        slice addr = calculate_address(init);
        
        send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(addr)
            .store_coins(0)
            .store_uint(6, 108)
            .store_ref(init)
        .end_cell(), 64);

    } elseif (op == op::confirm){
        slice address = in_msg;
        (_, slice sender) = in_msg_full.begin_parse().skip_bits(4).load_msg_addr();
        
        cell init = calculate_init(address);

        slice addr = calculate_address(init);

        throw_unless(701, equal_slices(addr, sender));

        claim(cheque_amount, address, claim_cont);

        activatied += 1;

        save_data();
    }
}

